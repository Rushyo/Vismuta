[bool] $invalid = $False;
$invalidTest = "If (`$invalid) { echo `"**************************** TAMPERED PAYLOAD OR INVALID KEY ****************************`"; }"
[string] $keyphrase = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($inputkey));
#$inputkey = 0;
[byte[]] $sds = 0xbc, 0x64, 0xba, 0xb0, 0x31, 0x63, 0xee, 0x30, 0x2a, 0xdf, 0xc0, 0x1b, 0x51, 0xae, 0x71, 0x99, 0x79, 0xbf, 0xf5, 0x18, 0x9a, 0x36, 0x8a, 0x56, 0x18, 0x3b, 0x29, 0xb4, 0xcf, 0xdc, 0x3c, 0x86;
[byte[]] $keybytes = [System.Text.UTF8Encoding]::UTF8.GetBytes($keyphrase);
#$keyphrase = 0;
[byte[]] $saltedkey = New-Object Byte[] (32 + $keybytes.Length);
[System.Array]::Copy($sds, 0, $saltedkey, 0, 32);
[System.Array]::Copy($keybytes, 0, $saltedkey, 32, $keybytes.Length);
#$keybytes = 0;

$hashAlg = [System.Security.Cryptography.SHA256]::Create();
[byte[]] $key = $hashAlg.ComputeHash($saltedkey);
#$saltedkey = 0;

[byte[]] $hash = New-Object Byte[] 64;
[byte[]] $aead = New-Object Byte[] ([[PAYLOAD]].Length - 64);
[byte[]] $iv = New-Object Byte[] 16;
[byte[]] $ciphertext = New-Object Byte[] ($aead.Length - 16);

[System.Array]::Copy([[PAYLOAD]], 0, $hash, 0, 64);
[System.Array]::Copy([[PAYLOAD]], 64, $aead, 0, [[PAYLOAD]].Length - 64);

$hmac = New-Object -TypeName System.Security.Cryptography.HMACSHA512 (, $key);
[byte[]] $computed = $hmac.ComputeHash($aead);
If ((diff $hash $computed).Length) { $aead = New-Object Byte[] 0; $invalid = $True; };

[System.Array]::Copy($aead, 0, $iv, 0, 16);
[System.Array]::Copy($aead, 16, $ciphertext, 0, $aead.Length - 16);

$aes = New-Object -TypeName System.Security.Cryptography.AesManaged;
$aes.KeySize = 256;
$aes.BlockSize = 128;
$aes.Padding = [System.Security.Cryptography.PaddingMode]::PKCS7;
$aes.Mode = [System.Security.Cryptography.CipherMode]::CBC;
$aes.Key = $key;
$aes.IV = $iv;
#$key = 0;

$decryptor = $aes.CreateDecryptor();
$memoryStream = New-Object -Type System.IO.MemoryStream (, $ciphertext);
$csm = [System.Security.Cryptography.CryptoStreamMode]::Read;
$cryptoStream = New-Object -Type System.Security.Cryptography.CryptoStream -ArgumentList $memoryStream,$decryptor,$csm;
$binaryReader = New-Object -Type System.IO.BinaryReader ($cryptoStream);
$memoryStream.Position = 0;
[byte[]] [[PAYLOAD]] = $binaryReader.ReadBytes($memoryStream.Length);
$binaryReader.Close();
$cryptoStream.Close();
$memoryStream.Close();

iex $invalidTest;